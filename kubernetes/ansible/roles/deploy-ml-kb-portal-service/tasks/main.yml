---

- name: template values.yaml file
  template:
    src: "{{ chart_path }}/values.j2"
    dest: "{{ chart_path }}/values.yaml"

- name: template configmap file
  template:
    src: "{{ template_env_file_name }}"
    dest: "{{ helm_env_file_name }}"

#- name: create env configmap
#  shell: find "{{ helm_env_file_location }}" -iname "*.env" -exec /bin/bash -c "ls {}; kubectl create configmap {{ release_name }}-config --from-env-file={} -n {{namespace}} --dry-run -o=yaml | kubectl apply -f - " \;

- name: create env configmap
  shell: find "{{ helm_env_file_location }}" -iname "*.env" -exec /bin/bash -c "ls {}; kubectl create configmap {{ release_name }}-config --from-env-file={} -n {{namespace}} --dry-run -o=yaml | kubectl apply -f - " \;


- name: remove env configmap file
  file:
   path: "{{ helm_env_file_name }}"
   state: absent
   
- name: Load role to decrypt private keys, copy to helm chart and encrypt private keys
  include_role:
    name: mount-keys
    tasks_from: copy-to-helm.yml

- name: Create the token pubic key file
  copy:
    dest: "{{ chart_path }}/keys/{{ adminutil_refresh_token_public_key_kid }}"
    content: "{{ core_vault_sunbird_sso_publickey }}"

- name: helm upgrade
  shell: helm upgrade --install --atomic --timeout 10m {{ release_name }} {{ chart_path }} -n {{namespace}}

- name: Get the deployment rollout status
  shell: "kubectl get deployments -A | grep -i {{ release_name }} | awk -F' ' '{print $3}' | awk -F/ '{if ($1 ~ $2){exit 0} else {exit 1}}'"
  register: task_result
  until: task_result.rc == 0
  retries: 6
  delay: 30

- name: Get deployed image name
  shell: kubectl get deployments.apps {{ release_name }} -o json -n {{ namespace }} | jq -r '.spec.template.spec.containers[0].image | split("/")[1]'
  register: deployed_image


