@Library('deploy-conf') _
node() {
    try {
        String ANSI_GREEN = "\u001B[32m"
        String ANSI_NORMAL = "\u001B[0m"
        String ANSI_BOLD = "\u001B[1m"
        String ANSI_RED = "\u001B[31m"
        String ANSI_YELLOW = "\u001B[33m"

        stage('checkout public repo') {
            folder = new File("$WORKSPACE/.git")
            if (folder.exists())
            {
               println "Found .git folder. Clearing it.."
               sh'git clean -fxd'
            }  
            checkout scm
        }

      stage('staticweb-pull') {

           dir("${env.WORKSPACE}/staticweb") {
                checkout scm: [$class: 'GitSCM', branches: [[name: staticweb_repo_branch]], extensions: [[$class: 'CloneOption', depth: 1, noTags: true, reference: '', shallow: true]], userRemoteConfigs: [[credentialsId: private_repo_credentials, url: staticweb_repo_url]]]
                commit_hash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                build_tag = sh(script: "echo " + params.branch_or_tag.split('/')[-1] + "_" + commit_hash + "_" + env.BUILD_NUMBER, returnStdout: true).trim()
                echo "build_tag: " + build_tag

                }
                }

        stage('deploy') {
            values = [:]
            envDir = sh(returnStdout: true, script: "echo $JOB_NAME").split('/')[-3].trim()
            module = sh(returnStdout: true, script: "echo $JOB_NAME").split('/')[-2].trim()
            jobName = sh(returnStdout: true, script: "echo $JOB_NAME").split('/')[-1].trim()
            currentWs = sh(returnStdout: true, script: 'pwd').trim()
            ansiblePlaybook = "$currentWs/kubernetes/ansible/main.yaml"
            ansibleExtraArgs = "--tag $role_name --extra-vars \"static_web_path=${currentWs}/staticweb role_name=${params.role_name}\" --vault-password-file /var/lib/jenkins/secrets/vault-pass -v"
            values.put('currentWs', currentWs)
            values.put('env', envDir)
            values.put('module', module)
            values.put('ansiblePlaybook', ansiblePlaybook)
            values.put('ansibleExtraArgs', ansibleExtraArgs)
            ansible_playbook_run(values)
            currentBuild.description = "Private: ${params.private_branch}, Public: ${params.branch_or_tag}"
        }
     }
    catch (err) {
        currentBuild.result = "FAILURE"
        throw err
    }
    finally {
        slack_notify(currentBuild.result)
        email_notify()
    }
}
